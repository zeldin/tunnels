#include "system.h"

#include "classic/ScreenEngine.h"
#include "FMTBuilder.h"

namespace Tunnels { namespace Classic {

void ScreenEngine::drawTitleScreen()
{
  using namespace VDP::FMTBuilder;

  screen.all(' ');
  screen.loadRomFont();
  static constexpr byte copyright[][VDP::PATTERN_H] {
    { 0x3c, 0x42, 0x99, 0xa1, 0xa1, 0x99, 0x42, 0x3c }
  };
  screen.loadPatterns(94, copyright);
  static constexpr byte color_table[] {
    0x44, 0x11, 0xf4, 0xf4, 0xf4, 0xf4, 0xf4, 0xf4,
    0xb4, 0xb4, 0xb4, 0xb4, 0xb4, 0xb4, 0xb4, 0x6e,
    0x2b, 0x34, 0xf6, 0xe4, 0x8e, 0x1e, 0xde, 0xce,
    0xce, 0xf4
  };
  screen.loadColorTable(4, color_table);
  screen.setBackground(VDP::DARK_RED);
  static constexpr byte patterns1[][VDP::PATTERN_H] {
    { 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff },
    { 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0 },
    { 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f },
    { 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00 },
    { 0x0f, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf0 },
    { 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0f },
    { 0x00, 0x00, 0x00, 0x00, 0x03, 0x0f, 0x1f, 0x3f },
    { 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0xf8, 0xfc },
    { 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c },
    { 0x3c, 0x18, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00 },
    { 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18 },
    { 0x07, 0x73, 0xfb, 0x8b, 0xab, 0x8b, 0xfb, 0x03 },
    { 0xe0, 0xce, 0xdf, 0xd1, 0xd5, 0xd1, 0xdf, 0xc0 },
    { 0x00, 0x3c, 0x7e, 0x5a, 0x7e, 0x66, 0x5a, 0x7e },
    { 0x03, 0x07, 0x07, 0x0b, 0xeb, 0x13, 0xe3, 0x03 },
    { 0xc0, 0xc7, 0xc8, 0xd7, 0xd0, 0xe0, 0xe0, 0xc0 },
    { 0x07, 0x0f, 0x38, 0xe7, 0xdf, 0xc0, 0xff, 0x00 },
    { 0xe0, 0xf0, 0x1c, 0xe7, 0xfb, 0x03, 0xff, 0x00 },
    { 0x0f, 0x0f, 0x07, 0x07, 0x03, 0x03, 0x01, 0x00 },
    { 0x7f, 0x3f, 0x1f, 0x07, 0x00, 0x00, 0x00, 0x00 },
    { 0xfe, 0xfc, 0xf8, 0xe0, 0x00, 0x00, 0x00, 0x00 },
    { 0xf0, 0xf0, 0xe0, 0xe0, 0xc0, 0xc0, 0x80, 0x00 },
    { 0xc0, 0x78, 0x34, 0x7f, 0x72, 0x75, 0x7f, 0xf0 },
    { 0xf0, 0x78, 0x78, 0xf0, 0xf0, 0x78, 0x78, 0xf0 },
    { 0xf0, 0x78, 0xfc, 0x3c, 0xfe, 0x1e, 0xff, 0x07 },
    { 0xff, 0x03, 0xff, 0x01, 0xff, 0x00, 0xff, 0x00 },
    { 0x80, 0xc0, 0xc0, 0xe0, 0xf0, 0x78, 0xfc, 0x3f },
    { 0x4b, 0x4b, 0x7c, 0x1f, 0x7c, 0xb4, 0xd7, 0xe0 },
    { 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x07, 0x03, 0x01 },
    { 0x80, 0xc0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0 },
    { 0x00, 0x00, 0x00, 0x00, 0xf8, 0xec, 0xe6, 0xff },
    { 0xcd, 0x64, 0x37, 0x1f, 0x00, 0x00, 0x00, 0x00 },
    { 0x78, 0x3c, 0x1e, 0x1f, 0x77, 0x03, 0x06, 0x1c },
    { 0x38, 0x60, 0xc0, 0xee, 0xf8, 0x78, 0x3c, 0x1e },
    { 0x00, 0x00, 0x1f, 0x1f, 0x18, 0x1e, 0x1b, 0x1b },
    { 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b },
    { 0x1b, 0x1b, 0x1f, 0x1c, 0x1f, 0x1f, 0x00, 0x00 },
    { 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x80, 0xe0 },
    { 0xf8, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
    { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
    { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xf9 },
    { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf8 },
    { 0xe0, 0x83, 0x1f, 0x00, 0xff, 0xff, 0x00, 0x00 },
    { 0x00, 0x00, 0xff, 0xff, 0x00, 0x66, 0x99, 0x18 },
    { 0xff, 0xff, 0xfc, 0x00, 0xff, 0xff, 0x00, 0x00 },
    { 0x00, 0x00, 0xc0, 0xe0, 0xf0, 0x78, 0x3c, 0x1c },
    { 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c },
    { 0x8c, 0x1c, 0x38, 0x70, 0xe0, 0xc0, 0x00, 0x00 },
    { 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54 },
    { 0x54, 0x54, 0x54, 0x54, 0x00, 0x00, 0x00, 0x00 },
    { 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a },
    { 0x2a, 0x2a, 0x2a, 0x2a, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x3f, 0x20, 0x2f, 0x28, 0x2b, 0x2a },
    { 0x00, 0x00, 0xfc, 0x04, 0xf4, 0x14, 0xd4, 0x54 },
    { 0x06, 0x1f, 0xfb, 0xeb, 0x0b, 0x0b, 0x0f, 0x09 },
    { 0x00, 0x80, 0xc0, 0x60, 0x30, 0x10, 0x10, 0x00 },
    { 0x1f, 0x1f, 0x19, 0x10, 0x10, 0x10, 0x70, 0xf1 },
    { 0x00, 0x80, 0x80, 0xc0, 0x40, 0x40, 0xc0, 0xc0 },
  };
  screen.loadPatterns(96, patterns1);
  static constexpr byte patterns2[][VDP::PATTERN_H] {
    { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
    { 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x1f, 0x07, 0x01 },
    { 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xf8, 0xe0, 0x80 },
    { 0xff, 0x80, 0x80, 0x9f, 0x9f, 0x9f, 0x9e, 0x9c },
    { 0xff, 0x01, 0x01, 0xf9, 0xf9, 0xf9, 0x79, 0x39 },
    { 0x9c, 0x9e, 0x9f, 0x9f, 0x9f, 0x80, 0x80, 0xff },
    { 0x39, 0x79, 0xf9, 0xf9, 0xf9, 0x01, 0x01, 0xff },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x02, 0x04, 0x64, 0x02, 0x12, 0x40, 0x5c },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0xfc },
    { 0xf0, 0xc0, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0xfc },
    { 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  };
  screen.loadPatterns(160, patterns2);
  static constexpr byte patterns3[][VDP::PATTERN_H] {
    { 0xfe, 0x9e, 0x9e, 0xfe, 0xfe, 0x00, 0x66, 0x66 },
    { 0xc0, 0xc0, 0x2e, 0x11, 0x20, 0x20, 0x23, 0x2c },
    { 0x03, 0x03, 0xf4, 0x08, 0x84, 0x84, 0x44, 0x48 },
    { 0x12, 0x22, 0x21, 0x21, 0x10, 0x2f, 0xc0, 0xc0 },
    { 0x34, 0xc4, 0x04, 0x04, 0x88, 0x74, 0x03, 0x03 },
  };
  screen.loadPatterns(176, patterns3);
  static constexpr byte patterns4[][VDP::PATTERN_H] {
    { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
    { 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff },
    { 0x00, 0x7e, 0x40, 0x5e, 0x50, 0x56, 0x54, 0x00 },
    { 0xfa, 0xf8, 0xfa, 0xfa, 0xfd, 0xf8, 0xfa, 0xf8 },
    { 0xfd, 0xfd, 0xfd, 0xfd, 0xfd, 0xfd, 0xfd, 0xfd },
  };
  screen.loadPatterns(184, patterns4);
  static constexpr byte patterns5[][VDP::PATTERN_H] {
    { 0x00, 0x00, 0x38, 0x7c, 0x54, 0xf4, 0x1c, 0x78 },
    { 0x1e, 0x16, 0x3e, 0x1e, 0x06, 0x1e, 0x36, 0x26 },
    { 0x00, 0x00, 0x0e, 0x0b, 0x1f, 0x03, 0x0f, 0x06 },
  };
  screen.loadPatterns(192, patterns5);
  static constexpr byte patterns6[][VDP::PATTERN_H] {
    { 0x18, 0x1c, 0x0e, 0x07, 0x03, 0x01, 0x00, 0x00 },
    { 0x00, 0x0c, 0x0c, 0x0c, 0x1e, 0x1a, 0x16, 0x1e },
    { 0x0e, 0x1e, 0x3e, 0xf6, 0xef, 0xbf, 0x3b, 0x35 },
    { 0x2f, 0x7b, 0x5f, 0x6f, 0x75, 0xfd, 0xff, 0xe7 },
    { 0x02, 0x15, 0x09, 0x17, 0x22, 0x1c, 0x00, 0x00 },
    { 0x7c, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x80, 0xe0, 0xf0, 0x78, 0x7c, 0x3e, 0x3f },
    { 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe },
    { 0x00, 0x00, 0x03, 0x8f, 0x7e, 0x78, 0xc2, 0x02 },
    { 0x3c, 0xec, 0xd4, 0xec, 0x54, 0x6c, 0x5c, 0xbc },
    { 0xde, 0x1e, 0x3e, 0x7e, 0xfe, 0xef, 0xc7, 0x87 },
    { 0x07, 0x07, 0x02, 0x02, 0x00, 0x01, 0x03, 0x07 },
    { 0x07, 0x06, 0x06, 0x06, 0x06, 0x06, 0x1e, 0x3e },
    { 0x07, 0x07, 0x07, 0x07, 0x03, 0x03, 0x0f, 0x1f },
  };
  screen.loadPatterns(200, patterns6);
  static constexpr byte patterns7[][VDP::PATTERN_H] {
    { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
    { 0x3f, 0x3f, 0x7f, 0x7f, 0x7f, 0x7f, 0xff, 0xff },
    { 0xff, 0x83, 0xb7, 0x8f, 0xff, 0xff, 0xfc, 0xf8 },
    { 0x80, 0xf8, 0xfe, 0xfe, 0xe0, 0x00, 0x00, 0x06 },
    { 0xe0, 0xc1, 0xff, 0xff, 0xfc, 0xe0, 0xc0, 0x80 },
    { 0x3e, 0xf8, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x01, 0x01, 0x03, 0x03, 0x07, 0x0f, 0x3f, 0xff },
    { 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xf2 },
    { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff },
    { 0xfc, 0xc4, 0xf8, 0x08, 0xf0, 0xe0, 0x40, 0x80 },
    { 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0x1c, 0xe0 },
    { 0xff, 0xfe, 0x04, 0xf8, 0xe0, 0x80, 0x00, 0x00 },
    { 0xff, 0xf8, 0xc0, 0xf8, 0xff, 0xff, 0xff, 0xff },
    { 0x00, 0x00, 0x00, 0x3f, 0xff, 0xf8, 0xf0, 0x00 },
    { 0x00, 0x0f, 0x7f, 0xff, 0xf8, 0x1c, 0x06, 0x02 },
    { 0x00, 0xe0, 0xf0, 0x98, 0x88, 0xce, 0x64, 0x22 },
    { 0x00, 0xc0, 0xc0, 0x00, 0x00, 0xc0, 0xc0, 0x00 },
    { 0x00, 0xc0, 0xc0, 0x00, 0x00, 0x80, 0xc6, 0xe6 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66 },
    { 0x7f, 0xf9, 0xf1, 0x7f, 0x3e, 0x0c, 0x04, 0x06 },
    { 0xfe, 0x9f, 0x8f, 0xfe, 0x7c, 0x30, 0x20, 0x60 },
  };
  screen.loadPatterns(216, patterns7);

  // "Tunnels"
  static constexpr const auto fmt1 =
    fmt(ROW(23), COL(0), RPTB(2, HCHA(32, '*')),
	RPTB(22, HCHA(2, '*'), RIGHT(28), HCHA(2, '*')),
	DOWN(3), RIGHT(3), HSTR("haaio\xa8\xa8o"),
	RPTB(2, HSTR("gf x")), HSTR("g\xa9\xaag"),
	RIGHT(3), HSTR("gaf"), RIGHT(6), HSTR("jmnjc\xa0\xa0""b"),
	RPTB(2, HSTR("cz y")), RPTB(2, HSTR("c\xa9\xab""c\xe8"), RIGHT(27)),
	DOWN(22), RIGHT(7), HSTR("~\x80\x82"),
	RIGHT(6), HSTR("kpqkt\xa1\xa2w"),
	RPTB(2, HSTR("c{|y")), RIGHT(4), HSTR("\xe9\xea \x83\x81\x7f"),
	RIGHT(6), RPTB(2, HSTR("lpql"), RIGHT(28)),
	DOWN(22), RIGHT(4), HSTR(" uv "), RPTB(2, HSTR("e``d")),
	HSTR("e \xac}``d"), HSTR("e`d"),
	DOWN(1), RIGHT(7), HSTR("rs"), RIGHT(29));
    fmt1(screen);
  // "of" + upper part of illustration
  static constexpr const auto fmt2 =
    fmt(HSTR("gaafgaa"), RIGHT(25), HSTR("c\xa3\xa4""bc\xb0\xb0  \xb9"),
	HCHA(17, 0xb8), RIGHT(5), HSTR("c\xa5\xa6""bc`` \xb9"),
	HCHA(18, 0xb8), RIGHT(5), HSTR("e``dc  \xb9"), HCHA(7, 0xb8),
	HSTR("\xc0\xb8\xb8\xbb\xc9"), HCHA(7, 0xb8), RIGHT(11),
	HSTR("\xb9"), HCHA(6, 0xb8), HSTR("\xc8\xd0\xd1\xb8\xb8\xbc\xc1"),
	HCHA(3, 0xb8), HSTR("\xc2"), HCHA(3, 0xb8), RIGHT(4), HCHA(15, 0xb8),
	HSTR("\xd3\xd2\xb8\xb8\xbc\xca"), HSTR("\xb8\xb8\xcc\x98\x99\xb8\xb8"),
	RIGHT(4), HSTR("\xb8\xb8\xcd\xce"), HCHA(11, 0xb8),
	HSTR("\xd4\xd5\xb8\xb8\xbc\xcb"), HCHA(3, 0xb8),
	HSTR("\x9a\x9b\xb8\xb8"), RIGHT(4), HCHA(3, 0xb8),
	HSTR("\xd9\xda\xdb"), HCHA(4, 0xb8), HSTR("\xba"), RIGHT(21));
  fmt2(screen);
  // lower part of illustration
  static constexpr const auto fmt3 =
    fmt(HCHA(3, 0xb8), HSTR("\xd8\xdc\xdd"), HCHA(3, 0xb8), HSTR("\xba"),
	RIGHT(22), HSTR("\xcf\xcf\xde\xdf"), HCHA(4, 0xb8), HSTR("\xba"),
	RIGHT(23), HSTR("\xd8\xd8\xe0\xe1"), HCHA(3, 0xb8), HSTR("\xba"),
	RIGHT(24), HSTR("\xe0\xe2\xe3"), HCHA(3, 0xb8), HSTR("\xba"),
	RIGHT(25), HSTR("\xe4\xe5\xe6\xe7\xb8\xba"), RIGHT(5), DOWN(20));
  fmt3(screen);
  // "Doom" + copyright message
  static constexpr const auto fmt4 =
    fmt(HSTR("\x84\x87\x8d\x8f"), RPTB(2, HSTR("gaaf")),
	RPTB(2, HSTR("\x96\x97")), RIGHT(16), HSTR("\x85\x88 \x90"),
	RPTB(2, HSTR("c\xb1\xb2""b")), HSTR("\x94\xeb\xec\x92"),
	RIGHT(16), HSTR("\x85\x8a \x90"),
	RPTB(2, HSTR("c\xb3\xb4""b")), HSTR("\x94  \x92"),
	RIGHT(16), HSTR("\x85\x89 \x90"), RPTB(2, HSTR("e``d")),
	HSTR("\x95  \x93"), RIGHT(16), HSTR("\x85\x8b \x90"),
	RIGHT(28), HSTR("\x86\x8c\x8e\x91"),
	RIGHT(19), HSTR("^1982  TEXAS INSTRUMENTS"));
  fmt4(screen);
}

}}
