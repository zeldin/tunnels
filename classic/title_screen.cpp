#include "system.h"

#include "classic/ScreenEngine.h"

namespace Tunnels { namespace Classic {

void ScreenEngine::drawTitleScreen()
{
  screen.all(' ');
  screen.loadRomFont();
  static constexpr byte copyright[][VDP::PATTERN_H] {
    { 0x3c, 0x42, 0x99, 0xa1, 0xa1, 0x99, 0x42, 0x3c }
  };
  screen.loadPatterns(94, copyright);
  static constexpr byte color_table[] {
    0x44, 0x11, 0xf4, 0xf4, 0xf4, 0xf4, 0xf4, 0xf4,
    0xb4, 0xb4, 0xb4, 0xb4, 0xb4, 0xb4, 0xb4, 0x6e,
    0x2b, 0x34, 0xf6, 0xe4, 0x8e, 0x1e, 0xde, 0xce,
    0xce, 0xf4
  };
  screen.loadColorTable(4, color_table);
  static constexpr byte patterns1[][VDP::PATTERN_H] {
    { 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff },
    { 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0 },
    { 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f },
    { 0xf0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00 },
    { 0x0f, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf0 },
    { 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0f },
    { 0x00, 0x00, 0x00, 0x00, 0x03, 0x0f, 0x1f, 0x3f },
    { 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0xf8, 0xfc },
    { 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c },
    { 0x3c, 0x18, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00 },
    { 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18 },
    { 0x07, 0x73, 0xfb, 0x8b, 0xab, 0x8b, 0xfb, 0x03 },
    { 0xe0, 0xce, 0xdf, 0xd1, 0xd5, 0xd1, 0xdf, 0xc0 },
    { 0x00, 0x3c, 0x7e, 0x5a, 0x7e, 0x66, 0x5a, 0x7e },
    { 0x03, 0x07, 0x07, 0x0b, 0xeb, 0x13, 0xe3, 0x03 },
    { 0xc0, 0xc7, 0xc8, 0xd7, 0xd0, 0xe0, 0xe0, 0xc0 },
    { 0x07, 0x0f, 0x38, 0xe7, 0xdf, 0xc0, 0xff, 0x00 },
    { 0xe0, 0xf0, 0x1c, 0xe7, 0xfb, 0x03, 0xff, 0x00 },
    { 0x0f, 0x0f, 0x07, 0x07, 0x03, 0x03, 0x01, 0x00 },
    { 0x7f, 0x3f, 0x1f, 0x07, 0x00, 0x00, 0x00, 0x00 },
    { 0xfe, 0xfc, 0xf8, 0xe0, 0x00, 0x00, 0x00, 0x00 },
    { 0xf0, 0xf0, 0xe0, 0xe0, 0xc0, 0xc0, 0x80, 0x00 },
    { 0xc0, 0x78, 0x34, 0x7f, 0x72, 0x75, 0x7f, 0xf0 },
    { 0xf0, 0x78, 0x78, 0xf0, 0xf0, 0x78, 0x78, 0xf0 },
    { 0xf0, 0x78, 0xfc, 0x3c, 0xfe, 0x1e, 0xff, 0x07 },
    { 0xff, 0x03, 0xff, 0x01, 0xff, 0x00, 0xff, 0x00 },
    { 0x80, 0xc0, 0xc0, 0xe0, 0xf0, 0x78, 0xfc, 0x3f },
    { 0x4b, 0x4b, 0x7c, 0x1f, 0x7c, 0xb4, 0xd7, 0xe0 },
    { 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x07, 0x03, 0x01 },
    { 0x80, 0xc0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0 },
    { 0x00, 0x00, 0x00, 0x00, 0xf8, 0xec, 0xe6, 0xff },
    { 0xcd, 0x64, 0x37, 0x1f, 0x00, 0x00, 0x00, 0x00 },
    { 0x78, 0x3c, 0x1e, 0x1f, 0x77, 0x03, 0x06, 0x1c },
    { 0x38, 0x60, 0xc0, 0xee, 0xf8, 0x78, 0x3c, 0x1e },
    { 0x00, 0x00, 0x1f, 0x1f, 0x18, 0x1e, 0x1b, 0x1b },
    { 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b, 0x1b },
    { 0x1b, 0x1b, 0x1f, 0x1c, 0x1f, 0x1f, 0x00, 0x00 },
    { 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x80, 0xe0 },
    { 0xf8, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
    { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
    { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xf9 },
    { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf8 },
    { 0xe0, 0x83, 0x1f, 0x00, 0xff, 0xff, 0x00, 0x00 },
    { 0x00, 0x00, 0xff, 0xff, 0x00, 0x66, 0x99, 0x18 },
    { 0xff, 0xff, 0xfc, 0x00, 0xff, 0xff, 0x00, 0x00 },
    { 0x00, 0x00, 0xc0, 0xe0, 0xf0, 0x78, 0x3c, 0x1c },
    { 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c },
    { 0x8c, 0x1c, 0x38, 0x70, 0xe0, 0xc0, 0x00, 0x00 },
    { 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54 },
    { 0x54, 0x54, 0x54, 0x54, 0x00, 0x00, 0x00, 0x00 },
    { 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a },
    { 0x2a, 0x2a, 0x2a, 0x2a, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x3f, 0x20, 0x2f, 0x28, 0x2b, 0x2a },
    { 0x00, 0x00, 0xfc, 0x04, 0xf4, 0x14, 0xd4, 0x54 },
    { 0x06, 0x1f, 0xfb, 0xeb, 0x0b, 0x0b, 0x0f, 0x09 },
    { 0x00, 0x80, 0xc0, 0x60, 0x30, 0x10, 0x10, 0x00 },
    { 0x1f, 0x1f, 0x19, 0x10, 0x10, 0x10, 0x70, 0xf1 },
    { 0x00, 0x80, 0x80, 0xc0, 0x40, 0x40, 0xc0, 0xc0 },
  };
  screen.loadPatterns(96, patterns1);
  static constexpr byte patterns2[][VDP::PATTERN_H] {
    { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
    { 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x1f, 0x07, 0x01 },
    { 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xf8, 0xe0, 0x80 },
    { 0xff, 0x80, 0x80, 0x9f, 0x9f, 0x9f, 0x9e, 0x9c },
    { 0xff, 0x01, 0x01, 0xf9, 0xf9, 0xf9, 0x79, 0x39 },
    { 0x9c, 0x9e, 0x9f, 0x9f, 0x9f, 0x80, 0x80, 0xff },
    { 0x39, 0x79, 0xf9, 0xf9, 0xf9, 0x01, 0x01, 0xff },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x02, 0x04, 0x64, 0x02, 0x12, 0x40, 0x5c },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0xfc },
    { 0xf0, 0xc0, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0xfc },
    { 0xf0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
  };
  screen.loadPatterns(160, patterns2);
  static constexpr byte patterns3[][VDP::PATTERN_H] {
    { 0xfe, 0x9e, 0x9e, 0xfe, 0xfe, 0x00, 0x66, 0x66 },
    { 0xc0, 0xc0, 0x2e, 0x11, 0x20, 0x20, 0x23, 0x2c },
    { 0x03, 0x03, 0xf4, 0x08, 0x84, 0x84, 0x44, 0x48 },
    { 0x12, 0x22, 0x21, 0x21, 0x10, 0x2f, 0xc0, 0xc0 },
    { 0x34, 0xc4, 0x04, 0x04, 0x88, 0x74, 0x03, 0x03 },
  };
  screen.loadPatterns(176, patterns3);
  static constexpr byte patterns4[][VDP::PATTERN_H] {
    { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
    { 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x7f, 0xff },
    { 0x00, 0x7e, 0x40, 0x5e, 0x50, 0x56, 0x54, 0x00 },
    { 0xfa, 0xf8, 0xfa, 0xfa, 0xfd, 0xf8, 0xfa, 0xf8 },
    { 0xfd, 0xfd, 0xfd, 0xfd, 0xfd, 0xfd, 0xfd, 0xfd },
  };
  screen.loadPatterns(184, patterns4);
  static constexpr byte patterns5[][VDP::PATTERN_H] {
    { 0x00, 0x00, 0x38, 0x7c, 0x54, 0xf4, 0x1c, 0x78 },
    { 0x1e, 0x16, 0x3e, 0x1e, 0x06, 0x1e, 0x36, 0x26 },
    { 0x00, 0x00, 0x0e, 0x0b, 0x1f, 0x03, 0x0f, 0x06 },
  };
  screen.loadPatterns(192, patterns5);
  static constexpr byte patterns6[][VDP::PATTERN_H] {
    { 0x18, 0x1c, 0x0e, 0x07, 0x03, 0x01, 0x00, 0x00 },
    { 0x00, 0x0c, 0x0c, 0x0c, 0x1e, 0x1a, 0x16, 0x1e },
    { 0x0e, 0x1e, 0x3e, 0xf6, 0xef, 0xbf, 0x3b, 0x35 },
    { 0x2f, 0x7b, 0x5f, 0x6f, 0x75, 0xfd, 0xff, 0xe7 },
    { 0x02, 0x15, 0x09, 0x17, 0x22, 0x1c, 0x00, 0x00 },
    { 0x7c, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x80, 0xe0, 0xf0, 0x78, 0x7c, 0x3e, 0x3f },
    { 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7c, 0xfe },
    { 0x00, 0x00, 0x03, 0x8f, 0x7e, 0x78, 0xc2, 0x02 },
    { 0x3c, 0xec, 0xd4, 0xec, 0x54, 0x6c, 0x5c, 0xbc },
    { 0xde, 0x1e, 0x3e, 0x7e, 0xfe, 0xef, 0xc7, 0x87 },
    { 0x07, 0x07, 0x02, 0x02, 0x00, 0x01, 0x03, 0x07 },
    { 0x07, 0x06, 0x06, 0x06, 0x06, 0x06, 0x1e, 0x3e },
    { 0x07, 0x07, 0x07, 0x07, 0x03, 0x03, 0x0f, 0x1f },
  };
  screen.loadPatterns(200, patterns6);
  static constexpr byte patterns7[][VDP::PATTERN_H] {
    { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff },
    { 0x3f, 0x3f, 0x7f, 0x7f, 0x7f, 0x7f, 0xff, 0xff },
    { 0xff, 0x83, 0xb7, 0x8f, 0xff, 0xff, 0xfc, 0xf8 },
    { 0x80, 0xf8, 0xfe, 0xfe, 0xe0, 0x00, 0x00, 0x06 },
    { 0xe0, 0xc1, 0xff, 0xff, 0xfc, 0xe0, 0xc0, 0x80 },
    { 0x3e, 0xf8, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x01, 0x01, 0x03, 0x03, 0x07, 0x0f, 0x3f, 0xff },
    { 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xf2 },
    { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff },
    { 0xfc, 0xc4, 0xf8, 0x08, 0xf0, 0xe0, 0x40, 0x80 },
    { 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0x1c, 0xe0 },
    { 0xff, 0xfe, 0x04, 0xf8, 0xe0, 0x80, 0x00, 0x00 },
    { 0xff, 0xf8, 0xc0, 0xf8, 0xff, 0xff, 0xff, 0xff },
    { 0x00, 0x00, 0x00, 0x3f, 0xff, 0xf8, 0xf0, 0x00 },
    { 0x00, 0x0f, 0x7f, 0xff, 0xf8, 0x1c, 0x06, 0x02 },
    { 0x00, 0xe0, 0xf0, 0x98, 0x88, 0xce, 0x64, 0x22 },
    { 0x00, 0xc0, 0xc0, 0x00, 0x00, 0xc0, 0xc0, 0x00 },
    { 0x00, 0xc0, 0xc0, 0x00, 0x00, 0x80, 0xc6, 0xe6 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66 },
    { 0x7f, 0xf9, 0xf1, 0x7f, 0x3e, 0x0c, 0x04, 0x06 },
    { 0xfe, 0x9f, 0x8f, 0xfe, 0x7c, 0x30, 0x20, 0x60 },
  };
  screen.loadPatterns(216, patterns7);

  // "Tunnels"
  static constexpr byte fmt1[] = {
    0xfe, 0x17, 0xff, 0x00, 0xc1, 0x5f, 0x2a, 0xfb,
    0x00, 0x05, 0xd5, 0x41, 0x2a, 0x9b, 0x41, 0x2a,
    0xfb, 0x00, 0x0b, 0xa2, 0x82, 0x07, 0x68, 0x61,
    0x61, 0x69, 0x6f, 0xa8, 0xa8, 0x6f, 0xc1, 0x03,
    0x67, 0x66, 0x20, 0x78, 0xfb, 0x00, 0x1f, 0x03,
    0x67, 0xa9, 0xaa, 0x67, 0x82, 0x02, 0x67, 0x61,
    0x66, 0x85, 0x07, 0x6a, 0x6d, 0x6e, 0x6a, 0x63,
    0xa0, 0xa0, 0x62, 0xc1, 0x03, 0x63, 0x7a, 0x20,
    0x79, 0xfb, 0x00, 0x3c, 0xc1, 0x04, 0x63, 0xa9,
    0xab, 0x63, 0xe8, 0x9a, 0xfb, 0x00, 0x45, 0xb5,
    0x86, 0x02, 0x7e, 0x80, 0x82, 0x85, 0x07, 0x6b,
    0x70, 0x71, 0x6b, 0x74, 0xa1, 0xa2, 0x77, 0xc1,
    0x03, 0x63, 0x7b, 0x7c, 0x79, 0xfb, 0x00, 0x60,
    0x83, 0x05, 0xe9, 0xea, 0x20, 0x83, 0x81, 0x7f,
    0x85, 0xc1, 0x03, 0x6c, 0x70, 0x71, 0x6c, 0x9b,
    0xfb, 0x00, 0x72, 0xb5, 0x83, 0x03, 0x20, 0x75,
    0x76, 0x20, 0xc1, 0x03, 0x65, 0x60, 0x60, 0x64,
    0xfb, 0x00, 0x83, 0x06, 0x65, 0x20, 0xac, 0x7d,
    0x60, 0x60, 0x64, 0x02, 0x65, 0x60, 0x64, 0xa0,
    0x86, 0x01, 0x72, 0x73, 0x9c, 0xfb,
  };
  screen.fmt(fmt1);
  // "of" + upper part of illustration
  static constexpr byte fmt2[] = {
    0x06, 0x67, 0x61, 0x61, 0x66, 0x67, 0x61, 0x61,
    0x98, 0x09, 0x63, 0xa3, 0xa4, 0x62, 0x63, 0xb0,
    0xb0, 0x20, 0x20, 0xb9, 0x50, 0xb8, 0x84, 0x08,
    0x63, 0xa5, 0xa6, 0x62, 0x63, 0x60, 0x60, 0x20,
    0xb9, 0x51, 0xb8, 0x84, 0x07, 0x65, 0x60, 0x60,
    0x64, 0x63, 0x20, 0x20, 0xb9, 0x46, 0xb8, 0x04,
    0xc0, 0xb8, 0xb8, 0xbb, 0xc9, 0x46, 0xb8, 0x8a,
    0x00, 0xb9, 0x45, 0xb8, 0x06, 0xc8, 0xd0, 0xd1,
    0xb8, 0xb8, 0xbc, 0xc1, 0x42, 0xb8, 0x00, 0xc2,
    0x42, 0xb8, 0x83, 0x4e, 0xb8, 0x05, 0xd3, 0xd2,
    0xb8, 0xb8, 0xbc, 0xca, 0x06, 0xb8, 0xb8, 0xcc,
    0x98, 0x99, 0xb8, 0xb8, 0x83, 0x03, 0xb8, 0xb8,
    0xcd, 0xce, 0x4a, 0xb8, 0x05, 0xd4, 0xd5, 0xb8,
    0xb8, 0xbc, 0xcb, 0x42, 0xb8, 0x03, 0x9a, 0x9b,
    0xb8, 0xb8, 0x83, 0x42, 0xb8, 0x02, 0xd9, 0xda,
    0xdb, 0x43, 0xb8, 0x00, 0xba, 0x94, 0xfb,
  };
  screen.fmt(fmt2);
  // lower part of illustration
  static constexpr byte fmt3[] = {
    0x42, 0xb8, 0x02, 0xd8, 0xdc, 0xdd, 0x42, 0xb8,
    0x00, 0xba, 0x95, 0x03, 0xcf, 0xcf, 0xde, 0xdf,
    0x43, 0xb8, 0x00, 0xba, 0x96, 0x03, 0xd8, 0xd8,
    0xe0, 0xe1, 0x42, 0xb8, 0x00, 0xba, 0x97, 0x02,
    0xe0, 0xe2, 0xe3, 0x42, 0xb8, 0x00, 0xba, 0x98,
    0x05, 0xe4, 0xe5, 0xe6, 0xe7, 0xb8, 0xba, 0x84,
    0xb3, 0xfb,
  };
  screen.fmt(fmt3);
  // "Doom" + copyright message
  static constexpr byte fmt4[] = {
    0x03, 0x84, 0x87, 0x8d, 0x8f, 0xc1, 0x03, 0x67,
    0x61, 0x61, 0x66, 0xfb, 0x00, 0x06, 0xc1, 0x01,
    0x96, 0x97, 0xfb, 0x00, 0x0f, 0x8f, 0x03, 0x85,
    0x88, 0x20, 0x90, 0xc1, 0x03, 0x63, 0xb1, 0xb2,
    0x62, 0xfb, 0x00, 0x1c, 0x03, 0x94, 0xeb, 0xec,
    0x92, 0x8f, 0x03, 0x85, 0x8a, 0x20, 0x90, 0xc1,
    0x03, 0x63, 0xb3, 0xb4, 0x62, 0xfb, 0x00, 0x30,
    0x03, 0x94, 0x20, 0x20, 0x92, 0x8f, 0x03, 0x85,
    0x89, 0x20, 0x90, 0xc1, 0x03, 0x65, 0x60, 0x60,
    0x64, 0xfb, 0x00, 0x44, 0x03, 0x95, 0x20, 0x20,
    0x93, 0x8f, 0x03, 0x85, 0x8b, 0x20, 0x90, 0x9b,
    0x03, 0x86, 0x8c, 0x8e, 0x91, 0x92, 0x17, 0x5e,
    0x31, 0x39, 0x38, 0x32, 0x20, 0x20, 0x54, 0x45,
    0x58, 0x41, 0x53, 0x20, 0x49, 0x4e, 0x53, 0x54,
    0x52, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0xfb,
  };
  screen.fmt(fmt4);
}

}}
