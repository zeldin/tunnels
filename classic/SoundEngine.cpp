#include "system.h"

#include "classic/SoundEngine.h"
#include "MusicBuilder.h"

namespace Tunnels { namespace Classic {

namespace {
using namespace DCSG::MusicBuilder;
static constexpr const auto soundData =
  music(INDEX<0xc6b6>(),
	BEAT(8, 0xe7, 0x9f, 0xbf, 0xc0, 0x06, 0xdf, 0xf0),
	BEAT(24, 0xcb, 0x00, 0xf4),
	BEAT(8, 0xc7, 0x00, 0xf2),
	JUMP<-1>(),

	INDEX<-3>(), // Quest object failed
	BEAT(8, 0x9f, 0xbf, 0xc0, 0x30, 0xd2, 0xff),
	BEAT(12, 0xc0, 0x2c, 0xd3),
	BEAT(16, 0xc0, 0x34, 0xd4),
	JUMP<-1>(),

	INDEX<0xc6e1>(),
	BEAT(4, 0xe7, 0x9f, 0xbf, 0xdf, 0xc0, 0x02, 0xf0),
	BEAT(6, 0xc0, 0x03, 0xf1),
	BEAT(8, 0xc0, 0x04, 0xf2),
	JUMP<-1>(),

	INDEX<0>(),
	BEAT(1, 0xe3),
	BEAT(8, 0xc6, 0x01, 0xd4, 0xff),
	BEAT(6, 0xc5, 0x01, 0xd2),
	BEAT(4, 0xc8, 0x01, 0xd0),
	JUMP<-1>(),

	INDEX<1>(),
	BEAT(1, 0xe3),
	BEAT(4, 0xc0, 0x3d, 0xd2, 0xff),
	BEAT(8, 0xc0, 0x3f, 0xd0),
	BEAT(16, 0xc0, 0x38, 0xd4),
	JUMP<-1>(),

	INDEX<2>(),
	BEAT(1, 0xe7),
	BEAT(2, 0xcc, 0x00, 0xdf, 0xf2),
	BEAT(8, 0xcb, 0x00, 0xf1),
	BEAT(32, 0xcf, 0x00, 0xf4),
	JUMP<-1>(),

	INDEX<3>(),
	BEAT(1, 0xe3),
	BEAT(4, 0xc0, 0x0b, 0xdf, 0xf6),
	BEAT(4, 0xc0, 0x0a, 0xf2),
	BEAT(16, 0xc0, 0x08, 0xf0),
	JUMP<-1>(),

	INDEX<4>(),
	BEAT(1, 0xe3),
	BEAT(8, 0xc0, 0x04, 0xdf, 0xf2),
	BEAT(16, 0xce, 0x03, 0xf1),
	BEAT(16, 0xc0, 0x04, 0xf2),
	JUMP<-1>(),

	INDEX<5>(),
	BEAT(1, 0xe7),
	BEAT(24, 0xc0, 0x30, 0xdf, 0xf0),
	BEAT(4, 0xc0, 0x3d, 0xd0),
	BEAT(4, 0xc0, 0x3f),
	JUMP<-1>(),

	INDEX<6>(),
	BEAT(1, 0xe3),
	BEAT(8, 0xc8, 0x06, 0xd2, 0xff),
	BEAT(6, 0xc4, 0x06, 0xd1),
	BEAT(4, 0xc0, 0x06, 0xd0),
	JUMP<-1>(),

	INDEX<7>(),
	BEAT(1, 0xe3),
	BEAT(8, 0xc0, 0x3e, 0xd2, 0xff),
	BEAT(2, 0xc0, 0x01, 0xdf),
	BEAT(12, 0xc0, 0x3f, 0xd0),
	JUMP<-1>(),

	INDEX<8>(),
	BEAT(1, 0xe7),
	BEAT(16, 0xc1, 0x00, 0xdf, 0xf1),
	BEAT(12, 0xc2, 0x00, 0xf0),
	BEAT(8, 0xc3, 0x00),
	JUMP<-1>(),

	INDEX<9>(),
	BEAT(1, 0xe7),
	BEAT(16, 0xcc, 0x0e, 0xdf, 0xf1),
	BEAT(16, 0xc0, 0x05, 0xf0),
	BEAT(48, 0xce, 0x0e, 0xf2),
	JUMP<-1>(),

	INDEX<10>(),
	BEAT(1, 0xe3),
	BEAT(8, 0xff, 0xc0, 0x30, 0xd2),
	BEAT(8, 0xc0, 0x31),
	BEAT(16, 0xdf, 0xcf, 0x2f, 0xf0),
	JUMP<-1>(),

	INDEX<11>(),
	BEAT(1, 0xe7),
	BEAT(4, 0xc0, 0x02, 0xd4, 0xfc),
	BEAT(6, 0xc2, 0x02, 0xd3, 0xff),
	BEAT(12, 0xc1, 0x02, 0xd2, 0xf4),
	JUMP<-1>(),

	INDEX<12>(),
	BEAT(1, 0xe3),
	BEAT(12, 0xcf, 0x3f, 0xd2, 0xff),
	BEAT(4, 0xc0, 0x0a, 0xdf, 0xf0),
	BEAT(4, 0xc0, 0x04, 0xf4),
	JUMP<-1>(),

	INDEX<13>(),
	BEAT(1, 0xe3),
	BEAT(3, 0xc0, 0x03, 0xdf, 0xf0),
	BEAT(4, 0xc0, 0x05),
	BEAT(12, 0xe7, 0xc0, 0x14, 0xf5),
	JUMP<-1>(),

	INDEX<14>(),
	BEAT(1, 0xe3),
	BEAT(8, 0xc0, 0x0d, 0xdf, 0xf1),
	BEAT(16, 0xcc, 0x0c, 0xf0),
	BEAT(16, 0xc2, 0x0d, 0xf2),
	JUMP<-1>(),

	INDEX<15>(),
	BEAT(1, 0xe3),
	BEAT(6, 0xc7, 0x04, 0xd2, 0xff),
	BEAT(10, 0xc6, 0x04, 0xd4),
	BEAT(12, 0xc4, 0x04, 0xd6),
	JUMP<-1>(),

	INDEX<-2>(),  // General store
	BEAT(8, 0xff, 0xdf, 0xbf, 0x8d, 0x38, 0x90),
	BEAT(8, 0x86, 0x35),
	BEAT(8, 0x8d, 0x38),
	BEAT(8, 0x86, 0x35),
	BEAT(8, 0x86, 0x2a, 0xab, 0x1a, 0xb0),
	BEAT(8, 0xa5, 0x1c),
	BEAT(16, 0xac, 0x1f),
	BEAT(40, 0x8b, 0x23, 0xab, 0x1a, 0xc3, 0x15, 0xd0),
	JUMP<-1>(),
	
	INDEX<0xc91f>(),
	BEAT(2, 0x9f, 0xbf, 0xdf, 0xff),
	BEAT(8, 0x8f, 0x05, 0x90),
	BEAT(8, 0x85, 0x05),
	BEAT(8, 0x80, 0x05, 0xab, 0x06, 0xb0),
	BEAT(8, 0x87, 0x04, 0xaf, 0x05),
	BEAT(8, 0x80, 0x05, 0xab, 0x06),
	BEAT(8, 0x85, 0x05, 0xa1, 0x07, 0xc7, 0x04, 0xd0),
	BEAT(8, 0x8f, 0x05, 0xaf, 0x07, 0xc0, 0x05),
	JUMP<-1>(),

	INDEX<-4>(),  // Quest object complete
	BEAT(1, 0x9f, 0xbf, 0xdf, 0xff),
	BEAT(12, 0x8e, 0x0f, 0xaf, 0x0b, 0x90, 0xb2),
	BEAT(12, 0xbf),
	BEAT(12, 0x86, 0x0d, 0xa0, 0x0a, 0xb0),
	BEAT(12, 0xbf),
	BEAT(12, 0x8e, 0x0f, 0xaf, 0x0b, 0xb2),
	BEAT(12, 0xbf),
	BEAT(12, 0x81, 0x14, 0xa6, 0x0d),
	BEAT(24, 0xa2, 0x0e),
	BEAT(12, 0xa6, 0x0d),
	BEAT(12, 0x8c, 0x17, 0xae, 0x0f),
	BEAT(12, 0x83, 0x15, 0xa6, 0x0d, 0xc5, 0x1c, 0xb1, 0xd6),
	BEAT(12, 0x8d, 0x11, 0xcc, 0x17, 0xb0, 0xd4),
	BEAT(12, 0xaa, 0x0a),
	BEAT(12, 0x82, 0x0e, 0xc1, 0x14, 0xd2),
	BEAT(12, 0xa0, 0x0a),
	BEAT(12, 0xaa, 0x0a, 0xd0),
	BEAT(12, 0xa0, 0x0a),
	BEAT(24, 0x8f, 0x0b, 0xaf, 0x08, 0xc1, 0x07),
	JUMP<-1>(),

	INDEX<0xc9c3>(),
	BEAT(16, 0x9f, 0xff, 0xc7, 0x35, 0xd1),
	BEAT(6, 0xdf),
	BEAT(16, 0xd1),
	BEAT(4, 0xdf),
	BEAT(8, 0xd1),
	BEAT(2, 0xdf),
	BEAT(16, 0xd1),
	BEAT(0, 0xdf),

	INDEX<0xc9df>(),
	BEAT(20, 0xff, 0x8a, 0x2f, 0x92, 0xbf, 0xdf),
	BEAT(10, 0x9f),
	BEAT(20, 0x92),
	BEAT(10, 0x87, 0x2a),
	BEAT(30, 0x81, 0x28),
	BEAT(30, 0x8a, 0x2f),
	BEAT(0, 0x9f),

	INDEX<-1>(),  // Stop
	BEAT(1, 0xff, 0xdf, 0xbf, 0x9f),
	BEAT(0, 0xff),

	INDEX<0xcbc2>(),
	BEAT(2, 0x9f, 0xa5, 0x01, 0xb0, 0xdf),
	BEAT(2, 0xa9, 0x01),
	BEAT(2, 0xae, 0x01),
	BEAT(2, 0xa4, 0x02),
	BEAT(2, 0xaa, 0x02),
	BEAT(2, 0xa2, 0x03),
	BEAT(2, 0xac, 0x03),
	BEAT(2, 0xa7, 0x04),
	BEAT(2, 0xa5, 0x05),
	BEAT(2, 0xa5, 0x06),
	BEAT(2, 0xa8, 0x07),
	BEAT(2, 0xaf, 0x08),
	BEAT(2, 0xaa, 0x0a),
	BEAT(2, 0xaa, 0x0c),
	BEAT(2, 0xa0, 0x0f),
	BEAT(1, 0xa5, 0x01),
	BEAT(1, 0xa9, 0x01),
	BEAT(1, 0xae, 0x01),
	BEAT(1, 0xa4, 0x02),
	BEAT(1, 0xaa, 0x02),
	BEAT(1, 0xa2, 0x03),
	BEAT(1, 0xac, 0x03),
	BEAT(1, 0xa7, 0x04),
	BEAT(1, 0xa5, 0x05),
	BEAT(1, 0xaa, 0x0c),
	BEAT(1, 0xa0, 0x0f),
	BEAT(1, 0xad, 0x11),
	BEAT(1, 0xa3, 0x15),
	BEAT(1, 0xa4, 0x19),
	BEAT(1, 0xa0, 0x1e),
	BEAT(1, 0xab, 0x23),
	BEAT(1, 0xa7, 0x2a),
	BEAT(1, 0xa7, 0x32),
	BEAT(2, 0xa0, 0x3c),
	BEAT(1, 0xa5, 0x01, 0xb4),
	BEAT(1, 0xa9, 0x01),
	BEAT(1, 0xae, 0x01),
	BEAT(1, 0xa4, 0x02),
	BEAT(1, 0xaa, 0x02),
	BEAT(1, 0xa2, 0x03),
	BEAT(1, 0xac, 0x03),
	BEAT(1, 0xa7, 0x04),
	BEAT(1, 0xa5, 0x05),
	BEAT(1, 0xaa, 0x0c),
	BEAT(1, 0xa0, 0x0f),
	BEAT(1, 0xad, 0x11),
	BEAT(1, 0xa3, 0x15),
	BEAT(1, 0xa4, 0x19),
	BEAT(1, 0xa0, 0x1e),
	BEAT(1, 0xab, 0x23),
	BEAT(1, 0xa7, 0x2a),
	BEAT(1, 0xa7, 0x32),
	BEAT(2, 0xa0, 0x3c),
	BEAT(1, 0xa5, 0x01, 0xb8),
	BEAT(1, 0xa9, 0x01),
	BEAT(1, 0xae, 0x01),
	BEAT(1, 0xa4, 0x02),
	BEAT(1, 0xaa, 0x02),
	BEAT(1, 0xa2, 0x03),
	BEAT(1, 0xac, 0x03),
	BEAT(1, 0xa7, 0x04),
	BEAT(1, 0xa5, 0x05),
	BEAT(1, 0xaa, 0x0c),
	BEAT(1, 0xa0, 0x0f),
	BEAT(1, 0xad, 0x11),
	BEAT(1, 0xa3, 0x15),
	BEAT(1, 0xa4, 0x19),
	BEAT(1, 0xa0, 0x1e),
	BEAT(1, 0xab, 0x23),
	BEAT(1, 0xa7, 0x2a),
	BEAT(1, 0xa7, 0x32),
	BEAT(2, 0xa0, 0x3c),
	BEAT(1, 0xa5, 0x01, 0xbc),
	BEAT(1, 0xa9, 0x01),
	BEAT(1, 0xae, 0x01),
	BEAT(1, 0xa4, 0x02),
	BEAT(1, 0xaa, 0x02),
	BEAT(1, 0xa2, 0x03),
	BEAT(1, 0xac, 0x03),
	BEAT(1, 0xa7, 0x04),
	BEAT(1, 0xa5, 0x05),
	BEAT(1, 0xaa, 0x0c),
	BEAT(1, 0xa0, 0x0f),
	BEAT(1, 0xad, 0x11),
	BEAT(1, 0xa3, 0x15),
	BEAT(1, 0xa4, 0x19),
	BEAT(1, 0xa0, 0x1e),
	BEAT(1, 0xab, 0x23),
	BEAT(1, 0xa7, 0x2a),
	BEAT(1, 0xa7, 0x32),
	BEAT(2, 0xa0, 0x3c),
	BEAT(0, 0xbf));

static constexpr const auto soundIndex =
	  index_array<0,15,-1>(soundData.index);
}

void SoundEngine::stopMusic()
{
  soundData.play<-1>(music);
}

void SoundEngine::beep()
{
  using namespace DCSG::MusicBuilder;
  static constexpr const auto beepSound = 
    DCSG::MusicBuilder::music(BEAT(10, 0xbf, 0xdf, 0xff, 0x80, 0x05, 0x92),
			      BEAT(0, 0x9f));
  beepSound.music.play(music);
}

void SoundEngine::honk()
{
  using namespace DCSG::MusicBuilder;
  static constexpr const auto honkSound = 
    DCSG::MusicBuilder::music(BEAT(10, 0xbf, 0xdf, 0xff, 0x80, 0x20, 0x90),
			      BEAT(0, 0x9f));
  honkSound.music.play(music);
}

void SoundEngine::playGeneralStoreMusic()
{
  soundData.play<-2>(music, true);
}

void SoundEngine::playMonsterSound(unsigned n)
{
  stopMusic();
  soundData.play(music, soundIndex, n);
}

void SoundEngine::playQuestObjectFailedMusic()
{
  soundData.play<-3>(music);
}

void SoundEngine::playQuestObjectCompleteMusic()
{
  soundData.play<-4>(music);
}

}}
